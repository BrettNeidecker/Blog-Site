Step 1: Set Up the Project on AWS

    Create an AWS Account (if you haven't already) and log into the AWS Management Console.

    Launch an EC2 Instance (the virtual server):
        Go to EC2 in the AWS Console.
        Click Launch Instance.
        Choose an Amazon Linux 2 or Ubuntu Server as the OS.
        Select an instance type (e.g., t2.micro for the free tier).
        Configure security group rules:
            Allow HTTP (port 80) and HTTPS (port 443) for web traffic.
            Allow SSH (port 22) for accessing the server remotely.
            Allow Custom TCP rule (port 3000) if you’re running your Node.js app on port 3000 (for testing).
        Review and launch your instance, then download the private key (.pem file) for SSH access.

    Connect to the EC2 Instance:
        Use the .pem file to SSH into the instance:

        bash

    ssh -i path/to/your-key.pem ec2-user@your-ec2-public-dns

Install Node.js and Git on the EC2 Instance:

bash

    sudo yum update -y       # for Amazon Linux
    sudo yum install -y nodejs git

    Install MongoDB or Use a Cloud MongoDB (e.g., MongoDB Atlas):
        For simplicity, I recommend using MongoDB Atlas so that you don’t have to manage a database server on EC2. Follow MongoDB’s setup steps, and note your MongoDB connection string.

Step 2: Set Up the Project Locally

    Initialize the Node.js Project:

    bash

mkdir blogging-platform
cd blogging-platform
npm init -y
npm install express mongoose bcryptjs jsonwebtoken dotenv

Project Structure: Here's the file structure for the backend:

bash

blogging-platform/
├── controllers/          # Functions to handle business logic
│   ├── authController.js  # Authentication logic
│   └── postController.js  # Blog post logic
├── models/               # Mongoose models
│   ├── User.js
│   └── Post.js
├── routes/               # Route handlers
│   ├── auth.js           # Routes for authentication
│   └── posts.js          # Routes for blog posts
├── middleware/
│   └── auth.js           # Middleware for protected routes
├── .env                  # Environment variables
├── server.js             # Entry point for the application
└── package.json

Environment Variables:

    In .env file, store sensitive information such as the MongoDB connection URI and JWT secret:

    env

        MONGO_URI=your_mongodb_connection_string
        JWT_SECRET=your_secret_key
        PORT=3000

